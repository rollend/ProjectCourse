myfiles$sulfate
attribute(myfiles)
attributes(myfiles)
class(myfiles)
myfiles<-lapply(selected,read.csv,header=T)
myfiles$sulfate
atrributes(myfiles)
attributes(myfiles)
myfiles[1]$sulfate
library(data.table)
myfiles<-lapply(selected,fread,header=TRUE)
df=rbindlist(myfiles)
do.call(rbind,myfiles)
df=do.call(rbind,myfiles)
mean(df[,sulfate])
df[sulfate]
df$sulfate
pollutantmean<-function(directory, pollutant,id=1:332){
path=file.path("G:/SkyDrive/Works/R/Coursa program data",directory)
temp=list.files(path=path, pattern="*.csv",full.names=TRUE)
file.numbers=as.numeric(sub(".csv",'',sub("G:/SkyDrive/Works/R/Coursa program data/specdata/",'',temp)))
selected=na.omit(temp[match(id,file.numbers)])
myfiles<-lapply(selected,read.csv,header=TRUE)
df=do.call(rbind,myfiles)
mean(df[,pollutant],na.rm=TRUE)
}
pollutantmean("specdata",'sulfate',32:35)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
libaray(swirl)
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd(old.dir,"testdir")
setwd(old.dir/"testdir")
setwd(file.path(old.dir,"testdir"))
setwd("testdir")
getwd()
info()
setwd(old.dir)
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.paht("mytest3.R",folder1,folder2)
file.path("mytest3.R",folder1,folder2)
args(file.path)
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2")
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse="")
paste(my_char,collapse=" ")
my_name<-c(my_char,"your_name_here")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",seq=" ")
paste("Hello","world!",seq= " ")
paste("Hello","world",seq= " ")
paste("Hello","world!",seq= "")
paste("Hello","world!",seq=" ")
paste("Hello","world!", seq=" ")
info()
paste("Hello","world!", seq=" ")
paste("Hello", "world!", sep = " ")
paste(c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf-Inf
my_data[,my_na]
my_data[my_na,]
file.path("G:/SkyDrive/Works/R/Coursa program data/ProgrammingAssignment3/outcome-of-care-measures.csv")
file.path("G:/SkyDrive/Works/R/Coursa program data/ProgrammingAssignment3/","outcome-of-care-measures.csv")
file.path("G:/SkyDrive/Works/R/Coursa program data/ProgrammingAssignment3","outcome-of-care-measures.csv")
file.path("G:/SkyDrive/Works/R/Coursa program data","ProgrammingAssignment3","outcome-of-care-measures.csv")
path=file.path("G:/SkyDrive/Works/R/Coursa program data/Data processing/QUEZ1/getdata-data-DATA.gov_NGAP.xlsx")
path=file.path("G:/SkyDrive/Works/R/Coursa program data/Data processing/QUEZ1/getdata-data-DATA.gov_NGAP.xlsx")
dat<-read.xlsx
library(XLConnect)
dat<-read.xlsx(path)
install.packages(xlsx)
"xlsx"
install.packages("xlsx")
?xlsx
??xlsx?
)
help(xlsx)
library(xlsx)
help("xlsx")
dat<-read.xlsx(path,1)
dat
dat[18:23,7:15]
sum(dat[18:23,7:15]$Zip*dat[18:23,7:15]$Ext,na.rm=T)
require(XML)
install.packages("XML")
library(XML)
path=file.path("G:/SkyDrive/Works/R/Coursa program data/Data processing/QUEZ1/getdata-data-restaurants.xml")
data<-xmlParse(path)
data
xml_data<-xmlToList(data)
sum(xml_data)
xml_data$zipcode
summary(xml_data)
xml_data[1,]
xml_data[,1]
xml_data
xml_data[["zipcode"]]
as.list(xml_data[["zipcode"]])
as.list(xml_data["zipcode"])
try1<-as.list(xml_data[["name"]][["zipcode"]])
xml_data[]
xml_data["name"]
xml_data$row$row$zipcode
xml_data$row$row
xml_data$row$zipcode
xml_data$row
data <- xmlParse("http://forecast.weather.gov/MapClick.php?lat=29.803&lon=-82.411&FcstType=digitalDWML")
location<-as.list(xml_data$row$row$zipcode)
indata<-xmlToDataFrame(path)
indata[1]
indata[1:10]
indata<-do.call(rbind,xml_data)
indata
as.data.frame.list(xml_data)
indata<-as.data.frame.list(xml_data)
indata
library(data.table)
install.packages((data.table))
install.packages("data.table")
library(data.table)
indata<-rbindlist(xml_data)
indata
indata<-rbindlist(indata)
todata<-rbindlist(indata)
todata<-rbindlist(indata,fill=TRUE)
str(xml_data)
ddd<-data.frame(do.call(rbind.data.frame, xml_data))
l <- list(a = list(var.1 = 1, var.2 = 2, var.3 = 3)
, b = list(var.1 = 4, var.2 = 5, var.3 = 6)
, c = list(var.1 = 7, var.2 = 8, var.3 = 9)
, d = list(var.1 = 10, var.2 = 11, var.3 = 12)
)
library (plyr)
df <- ldply (l, data.frame)
df
df1 <- ldply (xml_data, data.frame)
df1 <- ldply (xml_data, data.frame,stringsAsFactors=FALSE)
df1[1]
df1[2]
df1[3]
df1[4]
df1[5]
doc<-xmlInternalTreeParse(path)
rootNode<-xmlRoot(doc)
names(rootNode)
doc
rootNode
names(rootNode[[1]][[1]])
names(rootNode[[1]])
names(rootNode[[1]][1])
names(rootNode[[1]][[1])
names(rootNode[[1]][[1])
names(rootNode[[1]][[1]])
names(rootNode[[1]][[1]][[1]])
names(rootNode[[]][[1]][[1]])
names(rootNode[[2]][[1]][[1]])
names(rootNode[[1]][[1]][[2]])
names(rootNode[[1]][[2]])
library(data.table)
help("data.table")
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
MySQL
MySQL()
requires(MySQL)
require(MySQL)
library(MySQL)
install.packages(MySQL)
install.packages("MySQL")
install.packages("RMySQL")
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databases;")
result
dbDisconnect((ucscDb))
result
head(result,10)
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
head(allTables,5)
dbDisconnect((hg19))
hg19
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData<-dbReadTable(hg19,"affyU133Plus2")
head(affyData,5)
dbDisconnect(hg19)
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?
)
curl https://api.github.com/zen
myapp <- oauth_app("quiz2", "990522d13634e25c6f37", secret="3632574808dc5db68607c747310cdf47ba21854b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "990522d13634e25c6f37",
secret = "3632574808dc5db68607c747310cdf47ba21854b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "990522d13634e25c6f37",
secret = "3632574808dc5db68607c747310cdf47ba21854b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "990522d13634e25c6f37",
secret = "3632574808dc5db68607c747310cdf47ba21854b")
myapp <- oauth_app("quiz2",
key = "990522d13634e25c6f37",
secret = "3632574808dc5db68607c747310cdf47ba21854b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("quiz2",
key = "990522d13634e25c6f37",
secret = "3632574808dc5db68607c747310cdf47ba21854b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
myapp <- oauth_app("quiz2",
key = "990522d13634e25c6f37",
secret = "3632574808dc5db68607c747310cdf47ba21854b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("quiz2",
key = "990522d13634e25c6f37",
secret = "3632574808dc5db68607c747310cdf47ba21854b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("quiz2",
key = "990522d13634e25c6f37",
secret = "21fc753cbad543b07efdf34e1c040c475dcf7484")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
install.packages(httpuv)
install.packages("httpuv")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("quiz2",
key = "990522d13634e25c6f37",
secret = "21fc753cbad543b07efdf34e1c040c475dcf7484")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("quiz2",
key = "990522d13634e25c6f37",
secret = "21fc753cbad543b07efdf34e1c040c475dcf7484")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("quiz2",
key = "8f44faed64a7fa75def1",
secret = "72fe51248b77d2933932c79e107e74ecd262c80d")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
require(httr)
require(XML)
htmlCode <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
content <- content(htmlCode, as="text")
htmlParsed <- htmlParse(content, asText=TRUE)
xpathSApply(htmlParsed, "//title", xmlValue)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
library(sqldf)
library("sqldf")
require(sqldf)
install.packages("sqldf")
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
library(sqldf)
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
acs <- data.table(read.csv(f))
x.train <- read.table('./UCI HAR Dataset/train/X_train.txt')
setwd("G:/SkyDrive/Works/R/Coursa program data/Data processing")
x.train <- read.table('./UCI HAR Dataset/train/X_train.txt')
x.test <- read.table('./UCI HAR Dataset/test/X_test.txt')
x <- rbind(x.train, x.test)
subj.train <- read.table('./UCI HAR Dataset/train/subject_train.txt')
subj.test <- read.table('./UCI HAR Dataset/test/subject_test.txt')
subj <- rbind(subj.train, subj.test)
y.train <- read.table('./UCI HAR Dataset/train/y_train.txt')
y.test <- read.table('./UCI HAR Dataset/test/y_test.txt')
y <- rbind(y.train, y.test)
features <- read.table('./UCI HAR Dataset/features.txt')
mean.sd <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
x.mean.sd <- x[, mean.sd]
names(x.mean.sd) <- features[mean.sd, 2]
names(x.mean.sd) <- tolower(names(x.mean.sd))
names(x.mean.sd) <- gsub("\\(|\\)", "", names(x.mean.sd))
activities <- read.table('./UCI HAR Dataset/activity_labels.txt')
activities[, 2] <- tolower(as.character(activities[, 2]))
activities[, 2] <- gsub("_", "", activities[, 2])
y[, 1] = activities[y[, 1], 2]
colnames(y) <- 'activity'
colnames(subj) <- 'subject'
data <- cbind(subj, x.mean.sd, y)
str(data)
write.table(data, './Project/merged.txt', row.names = F)
##From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
average.df <- aggregate(x=data, by=list(activities=data$activity, subj=data$subject), FUN=mean)
average.df <- average.df[, !(colnames(average.df) %in% c("subj", "activity"))]
str(average.df)
write.table(average.df, './Project/average.txt', row.names = F)
write.table(data, './Project/merged.txt', row.names = F)
